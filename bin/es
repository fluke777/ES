#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'es_version'
require 'gooddata'
require 'pp'
require 'logger'
require 'es'
require 'date'
require 'chronic'
require 'fastercsv'

include GLI

PID       = ENV['PID']
ES_NAME   = ENV['ES_NAME']
LOGIN     = ENV['LOGIN']
PASSWORD  = ENV['PASSWORD']

program_desc 'ES generator - Should help you with working with Event Store'
version Es::VERSION

desc 'Turn on HTTP logger'
arg_name 'log'
switch [:l,:logger]

desc 'GD server'
arg_name 'server'
flag [:s,:server]

desc 'WEBDAV server'
arg_name 'webdav'
flag [:w,:webdav]


desc 'Creates ES'
command :create do |c|
  c.action do |global_options,options,args|
    Es::Commands::create({
      :pid        => PID,
      :es_name    => ES_NAME
    })
  end
end

desc 'Delete ES'
command :delete do |c|
  c.action do |global_options,options,args|
    Es::Commands::delete({
      :pid      => PID,
      :es_name  => ES_NAME
    })
  end
end


desc 'Show all types that are supported.'
command :types do |c|
  c.action do |global_options,options,args|
    Es::Commands::get_types.each {|t| puts t}
  end
end

desc 'Init ES'
command :init do |c|
  c.desc 'Execute only for one entity.'
  c.default_value false
  c.flag [:o, :only]
  
  c.desc 'Init also IsDeleted and DeletedAt columns.'
  c.default_value false
  c.switch [:d, :deleted]
  
  c.desc 'Verbose mode'
  c.default_value false
  c.switch [:v, :verbose]
  
  c.desc 'Base files directory.'
  c.default_value nil
  c.flag [:b, :basedir]
  
  c.action do |global_options,options,args|
    options[:pid]       = PID
    options[:es_name]   = ES_NAME
    Es::Commands::init(options)
  end
end

desc 'Load data'
command :load do |c|
  c.desc 'Execute only for one entity.'
  c.default_value false
  c.flag [:o, :only]
  
  c.desc 'Print the task in the ugly oneliner mode for use in legacy tools. Does not run the actual extract.'
  c.default_value false
  c.switch [:j, :json]
  
  c.desc 'Verbose mode'
  c.default_value false
  c.switch [:v, :verbose]

  c.desc 'Base files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern load*.json'
  c.default_value nil
  c.flag [:b, :basedir]

  c.action do |global_options,options,args|
    options[:filenames] = args
    options[:pattern]   = "gen_load*.json"
    options[:pid]       = PID
    options[:es_name]   = ES_NAME
    Es::Commands::load(options)
  end
end

desc 'Load Deleted Records'
command :load_deleted do |c|

  c.desc 'Base files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern load*.json'
  c.default_value nil
  c.flag [:b, :basedir]
  
  c.desc 'Compatibility mode. If set to true deleted records will be loaded old style with type isDeleted. Otherwise deleted records will be loaded with type attribute and DeletedAt field will be added.'
  c.default_value false
  c.switch [:c, :compatibility]

  c.action do |global_options,options,args|
    options[:filenames] = args
    options[:pattern]   = "gen_load*.json"
    options[:pid]       = PID
    options[:es_name]   = ES_NAME
    Es::Commands::load_deleted(options)
  end
end

desc 'Extract'
command :extract do |c|
  
  c.desc 'Execute only for one entity.'
  c.default_value false
  c.flag [:o, :only]
  
  c.desc 'Verbose mode'
  c.default_value false
  c.switch [:v, :verbose]
  
  c.desc 'Print the task in the ugly oneliner mode for use in legacy tools. Does not run the actual extract.'
  c.default_value true
  c.switch [:j, :json]
  
  c.desc 'Run as usual but output the task definition in pretty print for debugging.'
  c.default_value true
  c.switch [:d, :debug]

  c.desc 'Base files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern load*.json'
  c.default_value nil
  c.flag [:b, :basedir]

  c.desc 'Extract files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern extract*.json'
  c.default_value nil
  c.flag [:e, :extractdir]

  c.desc 'Business date'
  c.default_value nil
  c.flag [:n, :business_date]

  c.action do |global_options,options,args|
    options[:args]    = args
    options[:pid]     = PID
    options[:es_name] = ES_NAME
    business_date = nil
    begin
      business_date = Date.strptime(options[:business_date], "%Y-%m-%d").to_time unless options[:business_date].nil?
    rescue ArgumentError => e
      begin
        business_date = Time.at(Integer(options[:business_date]))
      rescue ArgumentError => e
        fail "Business date cannot be parsed from #{options[:business_date]} either as a date in format YYYY-MM-DD or an epoch timestamp"
      end
    end

    options[:now] = business_date

    Es::Commands::extract(options)
  end
end

desc 'Generate extract config template'
command :generate_extract do |c|
  c.desc 'Base files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern load*.json'
  c.default_value nil
  c.flag [:b, :basedir]
  
  c.action do |global_options,options,args|
    Es::Commands::generate_extract(options)
  end
end

desc 'Generate base conifg template'
command :generate_base do |c|
  
  c.desc 'Name of the entity. If inputdir is also specified all generated base files will have this entity set. If you want to set entity for each file according to the file name do not provide this parameter.'
  c.default_value nil
  c.flag [:e, :entity]

  c.desc 'Input file.'
  c.default_value nil
  c.flag [:i, :input]
  
  c.desc 'Output filename. If not provided it print to STDOUT.'
  c.default_value nil
  c.flag [:o, :output]
  
  c.desc 'Input files directory. If specified it will ignore specific file and it will pick up all files in this directory with pattern *.csv'
  c.default_value nil
  c.flag [:s, :inputdir]

  c.desc 'Base files directory. If this and inputdir are specified base JSONs will be generated into the directory.'
  c.default_value nil
  c.flag [:b, :basedir]

  c.action do |global_options,options,args|
    Es::Commands::generate_base(options)  
  end
end

desc 'Truncate entity. Truncation means that you specify a time all events in that entit larger than the time will be thrown away.'
command :truncate do |c|
  
  c.desc 'Name of the entity.'
  c.default_value nil
  c.flag [:e, :entity]

  c.desc 'Timestamp in epoch to which the ES will be truncated.'
  c.default_value nil
  c.flag [:t, :timestamp]

  c.desc 'Base files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern load*.json'
  c.default_value nil
  c.flag [:b, :basedir]

  c.action do |global_options,options,args|
    options[:load_filenames]  = args
    options[:pid]             = PID
    options[:es_name]         = ES_NAME
    options[:basedir_pattern] = "gen_load*.json"
    Es::Commands::truncate(options)
  end
end

desc 'Initial load column'
command :load_column do |c|
  
  c.desc 'Verbose mode'
  c.default_value false
  c.switch [:v, :verbose]
  
  c.desc 'Run as usual but output the task definition in pretty print for debugging.'
  c.default_value true
  c.switch [:d, :debug]

  c.desc 'Name of the column.'
  c.default_value nil
  c.flag [:n, :name]

  c.desc 'Name of the entity.'
  c.default_value nil
  c.flag [:e, :entity]

  c.desc 'Type of the column.'
  c.default_value nil
  c.flag [:t, :type]

  c.desc 'Base config filename.'
  c.default_value nil
  c.flag [:b, :base]

  c.desc 'Input data filename.'
  c.default_value nil
  c.flag [:i, :input]
  
  c.desc 'Name of recordid column'
  c.default_value nil
  c.flag :rid

  c.action do |global_options,options,args|
    options[:pid] = PID
    options[:es_name] = ES_NAME
    Es::Commands::load_column(options)
  end
end

desc 'Shows more info about'
command :inspect do |c|

  c.action do |global_options,options,args|

    what = args.first
    filename = args[1]

    case what
    when "load"
      fail "Specify a file with base config" if filename.nil?
      base_config_file = Es::Helpers.load_config(filename)
      base = Es::Load.parse(base_config_file)
      base.entities.each do |entity|
        puts entity.to_table
      end
    end
  end
end


pre do |global,command,options,args|
  next true if command.nil?
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  fail "PID env variable should be specified" if PID.nil? || PID.empty?
  fail "ES_NAME env variable should be specified" if ES_NAME.nil? || ES_NAME.empty?
  fail "LOGIN env variable should be specified" if LOGIN.nil? || LOGIN.empty?
  fail "PASSWORD env variable should be specified" if PASSWORD.nil? || PASSWORD.empty?

  GoodData.logger = Logger.new(STDOUT) if global[:logger]
  GD_SERVER = global[:server]
  GD_WEBDAV = global[:webdav]
  begin
    GoodData.connect LOGIN, PASSWORD, GD_SERVER, {
      :timeout       => 60,
      :webdav_server => GD_WEBDAV
    }
  rescue RestClient::BadRequest => e
    puts "Login Failed"
    exit 1
  end
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
   pp exception.backtrace
  if exception.is_a?(SystemExit) && exception.status == 0
    false
  else
    # pp exception.inspect
    puts exception.message.color(:red)
    false
  end
  
  # Error logic here
  # return false to skip default error handling
  # false
  # true
end

exit GLI.run(ARGV)
