#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
# require 'bundler/setup'
require 'gli'
require 'es_version'
require 'gooddata'
require 'pp'
require 'logger'
require 'es'
require 'date'
require 'chronic'
require 'fastercsv'

include GLI

PID       = ENV['PID']
ES_NAME   = ENV['ES_NAME']
LOGIN     = ENV['LOGIN']
PASSWORD  = ENV['PASSWORD']

program_desc 'ES generator - Should help you with working with Event Store'
version Es::VERSION

desc 'Turn on HTTP logger'
arg_name 'log'
switch [:l,:logger]

desc 'GD server'
arg_name 'server'
flag [:s,:server]

desc 'WEBDAV server'
arg_name 'webdav'
flag [:w,:webdav]


desc 'Creates ES'
command :create do |c|
  c.action do |global_options,options,args|
    begin
      GoodData.post "/gdc/projects/#{PID}/eventStore/stores", {:store => {:storeId => ES_NAME}}
    rescue RestClient::BadRequest
      puts "Seems like eventstore with name #{ES_NAME} already exists"
      exit 1
    end
  end
end

desc 'Delete ES'
command :delete do |c|
  c.action do |global_options,options,args|
    GoodData.delete "/gdc/projects/#{PID}/eventStore/stores/#{ES_NAME}"
  end
end


desc 'Show all types that are supported.'
command :types do |c|
  c.action do |global_options,options,args|
    Es::Field::FIELD_TYPES.each {|t| puts t}
  end
end

desc 'Load data'
command :load do |c|
  c.desc 'Execute only for one entity.'
  c.default_value false
  c.flag [:o, :only]
  
  c.desc 'Print the task in the ugly oneliner mode for use in legacy tools. Does not run the actual extract.'
  c.default_value false
  c.switch [:j, :json]
  
  c.desc 'Verbose mode'
  c.default_value false
  c.switch [:v, :verbose]

  c.desc 'Base files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern load*.json'
  c.default_value nil
  c.flag [:b, :basedir]

  c.action do |global_options,options,args|
    filenames = args
    base_dir = options[:basedir]
    if base_dir.nil?
      fail "Provide path to the loading configuration as a first argument" if filenames.empty?
    else
      # puts "would grab files like this #{"#{base_dir}/gen_json*.json"}"
      filenames = Dir::glob("#{base_dir}/gen_load*.json")
    end

    # for each config file
    filenames.each do |filename|
      fail "File #{filename} cannot be found" unless File.exist?(filename)
      load_config_file = Es::Helpers.load_config(filename)
      load = Es::Load.parse(load_config_file)

      load.entities.each do |entity|
        next if options[:only] && entity.name != options[:only]
        next unless Es::Helpers.has_more_lines?(entity.file)
        web_dav_file = Es::Helpers.load_destination_dir(PID, entity) + '/' + Es::Helpers.destination_file(entity)
        if options[:verbose]
          puts "Entity #{entity.name}".bright
          puts "Configuration from #{filename}"
          puts "Will load from #{entity.file} to #{web_dav_file}"
          puts JSON::pretty_generate(entity.to_load_fragment(PID))
        end
        if options[:j]
          puts "Entity #{entity.name}".bright unless options[:verbose]
          puts "load the file #{entity.file} to destination #{web_dav_file} and run the specified as the task"
          puts "======= Load JSON start"
          puts entity.to_load_fragment(PID).to_json.color(:blue)
          puts "======= Load JSON end"
          puts
        else
          entity.load(PID)
          puts "Done" if options[:verbose]
        end
      end
    end
  end
end


desc 'Load Deleted Records'
command :load_deleted do |c|

  c.desc 'Base files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern load*.json'
  c.default_value nil
  c.flag [:b, :basedir]
  
  c.desc 'Compatibility mode. If set to true deleted records will be loaded old style with type isDeleted. Otherwise deleted records will be loaded with type attribute and DeletedAt field will be added.'
  c.default_value false
  c.flag [:c, :compatibility]

  c.action do |global_options,options,args|

    filenames = args
    base_dir = options[:basedir]
    if base_dir.nil?
      fail "Provide path to the loading configuration as a first argument" if filenames.empty?
    else
      # puts "would grab files like this #{"#{base_dir}/gen_load*.json"}"
      filenames = Dir::glob("#{base_dir}/gen_load*.json")
    end
    
    compatibility_mode = options[:compatibility] || false
    deleted_type = compatibility_mode ? "isDeleted" : "attribute"
    
    filenames.each do |load_config_file|
      load_config = Es::Helpers.load_config(load_config_file)
      load = Es::Load.parse(load_config)
    
      load.entities.each do |entity|
        source_dir = File.dirname(entity.file)
        deleted_filename = Es::Helpers.destination_file(entity, :deleted => true)
        deleted_source = "#{source_dir}/#{deleted_filename}"
        next unless File.exist? deleted_source
        next unless Es::Helpers.has_more_lines?(deleted_source)
        e = Es::Entity.new(entity.name, {
          :file   => deleted_source,
          :fields => [
            Es::Field.new('Id', 'recordid'),
            Es::Field.new('Timestamp', 'timestamp'),
            Es::Field.new('IsDeleted', deleted_type)
          ]
        })
        e.load(PID)

        if !compatibility_mode
          deleted_with_time = "#{source_dir}/#{deleted_filename}".gsub(/\.csv$/, '_del.csv')
          FasterCSV.open(deleted_with_time, 'w') do |csv|
            csv << ['Id', 'Timestamp', 'DeletedAt']
            FasterCSV.foreach("#{source_dir}/#{deleted_filename}", :headers => true, :return_headers => false) do |row|
              csv << row.values_at('Id', 'Timestamp', 'Timestamp')
            end
          end

          e1 = Es::Entity.new(entity.name, {
            :file   => deleted_with_time,
            :fields => [
              Es::Field.new('Id', 'recordid'),
              Es::Field.new('Timestamp', 'timestamp'),
              Es::Field.new('DeletedAt', 'time')
            ]
          })
          e1.load(PID)
        end
      end
    end
  end
end

desc 'Extract'
command :extract do |c|
  
  c.desc 'Execute only for one entity.'
  c.default_value false
  c.flag [:o, :only]
  
  c.desc 'Verbose mode'
  c.default_value false
  c.switch [:v, :verbose]
  
  c.desc 'Print the task in the ugly oneliner mode for use in legacy tools. Does not run the actual extract.'
  c.default_value false
  c.switch [:j, :json]
  
  c.desc 'Run as usual but output the task definition in pretty print for debugging.'
  c.default_value true
  c.switch [:d, :debug]

  c.desc 'Base files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern load*.json'
  c.default_value nil
  c.flag [:b, :basedir]

  c.desc 'Extract files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern extract*.json'
  c.default_value nil
  c.flag [:e, :extractdir]
  

  c.action do |global_options,options,args|
    base_dir = options[:basedir]
    extract_dir = options[:extractdir]

    if base_dir.nil? && extract_dir.nil?
      fail "Provide path to the loading configuration as a first argument" if args.first.nil?
      load_config_files = [args.first]
      fail "Provide path to the extract configuration as a second argument" if args[1].nil?
      extract_config_files = [args[1]]
    else
      load_config_files = Dir::glob("#{base_dir}/gen_load*.json")
      extract_config_files = Dir::glob("#{extract_dir}/gen_extract*.json")
    end

    # build one giant load config
    load_entities = load_config_files.reduce([]) do |memo, filename|
      fail "File #{filename} cannot be found" unless File.exist?(filename)
      load_config = Es::Helpers.load_config(filename)
      load = Es::Load.parse(load_config)
      memo.concat(load.entities)
    end
    hyper_load = Es::Load.new(load_entities)

    extract_config_files.each do |extract_config_file|
      fail "File #{extract_config_file} cannot be found" unless File.exist?(extract_config_file)
      extract_config = Es::Helpers.load_config(extract_config_file)
      extract = Es::Extract.parse(extract_config, hyper_load)

      extract.entities.each do |entity|
        next if options[:only] && entity.name != options[:only]
        # pp extract.to_extract_fragment(PID)

        if options[:verbose] || options[:json] || options[:debug] then
          puts "Entity #{entity.name.bright}" 
          puts "Config from #{load_config_files.join(', ')} and #{extract_config_file}"
        end

        puts JSON.pretty_generate(entity.to_extract_fragment(PID)) if options[:debug]

        if options[:json]
          # puts "load the file #{entity.file} to destination #{web_dav_file} and run the specified as the task"
          puts "======= Extract JSON start"
          puts entity.to_extract_fragment(PID, :pretty => false).to_json.color(:blue)
          puts "======= Extract JSON end"
          puts
        else
          begin
            data = GoodData.post "/gdc/projects/#{PID}/eventStore/stores/#{ES_NAME}/readTasks", entity.to_extract_fragment(PID, :pretty => false).to_json
            link = data["asyncTask"]["link"]["poll"]
            response = GoodData.get(link, :process => false)
            while response.code != 204
              sleep 10
              response = GoodData.get(link, :process => false)
            end
            puts "Done downloading"
            web_dav_file = Es::Helpers.extract_destination_dir(PID, entity) + '/' + Es::Helpers.destination_file(entity)
            puts "Grabbing from web dav"
            GoodData.connection.download web_dav_file, entity.file
            puts "Done" if options[:verbose]
          rescue RestClient::RequestFailed => error
            parser = Yajl::Parser.new(:symbolize_keys => true)
            doc = parser.parse(error.response)
            pp doc
            exit 1
          end
        end
      end
    end
  end
end

desc 'Generate extract config template'
command :generate_extract do |c|
  c.desc 'Base files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern load*.json'
  c.default_value nil
  c.flag [:b, :basedir]
  
  c.action do |global_options,options,args|
    base_dir = options[:basedir]
    fail "You need to specify base dir" if base_dir.nil?
    
    base_filenames = Dir::glob("#{base_dir}/gen_load_*.json")
    # build one giant load config
    base_entities = base_filenames.reduce([]) do |memo, filename|
      fail "File #{filename} cannot be found" unless File.exist?(filename)
      load_config = Es::Helpers.load_config(filename)
      load = Es::Load.parse(load_config)
      memo.concat(load.entities)
    end
    hyper_load = Es::Load.new(base_entities)
    entity_names = hyper_load.entities.map {|e| e.name}.uniq

    entity_names.each do |entity_name|
      entity = hyper_load.get_merged_entity_for(entity_name)
      
      File.open(base_dir+"/gen_extract_"+entity.name+".json", 'w') do |f|
          f.write JSON.pretty_generate(entity.to_extract_config)
      end
    end
    
  end
end

desc 'Generate base conifg template'
command :generate_base do |c|
  
  c.desc 'Name of the entity. If inputdir is also specified all generated base files will have this entity set. If you want to set entity for each file according to the file name do not provide this parameter.'
  c.default_value nil
  c.flag [:e, :entity]

  c.desc 'Input file.'
  c.default_value nil
  c.flag [:i, :input]
  
  c.desc 'Output filename. If not provided it print to STDOUT.'
  c.default_value nil
  c.flag [:o, :output]
  
  c.desc 'Input files directory. If specified it will ignore specific file and it will pick up all files in this directory with pattern *.csv'
  c.default_value nil
  c.flag [:s, :inputdir]

  c.desc 'Base files directory. If this and inputdir are specified base JSONs will be generated into the directory.'
  c.default_value nil
  c.flag [:b, :basedir]

  c.action do |global_options,options,args|
    entity = options[:entity]
    input_filename = options[:input]
    input_dir = options[:inputdir]
    output_filename = options[:output]
    base_dir = options[:basedir]

    fail "You need to specify input file name or input dir" if input_filename.nil? && input_dir.nil?

    if base_dir.nil?
      input_filenames = [input_filename]
    else
      input_filenames = Dir::glob("#{input_dir}/*.csv")
    end
       
    input_filenames.each do |input_filename|

      headers = nil
      FasterCSV.foreach(input_filename, :headers => true, :return_headers => true) do |row|
        if row.header_row?
          headers = row.fields
          break
        end
      end

      entity_name = entity || File.basename(input_filename, ".csv")
      load = Es::Load.new([
        Es::Entity.new(entity_name, {
          :file => input_filename,
          :fields => headers.map do |field_name|
            Es::Field.new(field_name, "none")
          end
        })
      ])

      config = JSON.pretty_generate(load.to_config)
      
      if input_dir && base_dir
        File.open(base_dir+"/gen_load_"+entity_name+".json", 'w') do |f|
          f.write config
        end
      elsif input_filename && output_filename
        File.open(output_filename, 'w') do |f|
          f.write config
        end
      else 
        puts config
      end
      
    end
  end
end

desc 'Truncate entity. Truncation means that you specify a time all events in that entit larger than the time will be thrown away.'
command :truncate do |c|
  
  c.desc 'Name of the entity.'
  c.default_value nil
  c.flag [:e, :entity]

  c.desc 'Timestamp in epoch to which the ES will be truncated.'
  c.default_value nil
  c.flag [:t, :timestamp]

  c.desc 'Base files directory. If specified it will ignore specific files and it will pick up all files in this directory with pattern load*.json'
  c.default_value nil
  c.flag [:b, :basedir]

  c.action do |global_options,options,args|
    entity_name = options[:entity]
    timestamp = options[:timestamp]
    filenames = args

    base_dir = options[:basedir]
    if base_dir.nil?
      # fail "You need to specify entity name" if entity_name.nil?
      fail "You need to specify timestamp" if timestamp.nil?
      fail "You need to specify base filename" if filenames.empty?
    else
      # puts "would grab files like this #{"#{base_dir}/gen_load*.json"}"
      filenames = Dir::glob("#{base_dir}/gen_load*.json")
    end

    filenames.each do |base_filename|

      base_config_file = Es::Helpers.load_config(base_filename)
      base = Es::Load.parse(base_config_file)

      base.entities.each do |entity|

        next if !entity_name.nil? and entity_name != entity.name

        begin
          data = GoodData.post "/gdc/projects/#{PID}/eventStore/stores/#{ES_NAME}/truncateTasks", {
            :truncateTask => {
              :entity     => entity.name,
              :timestamp  => timestamp.to_i
            }
          }
        rescue RestClient::BadRequest => e
          puts e.inspect
          exit 1
        end
        link = data["asyncTask"]["link"]["poll"]
        response = GoodData.get(link, :process => false)
        while response.code != 204
          sleep 10
          response = GoodData.get(link, :process => false)
        end
      end
    end
  end
end

desc 'Initial load column'
command :load_column do |c|
  
  c.desc 'Verbose mode'
  c.default_value false
  c.switch [:v, :verbose]
  
  c.desc 'Run as usual but output the task definition in pretty print for debugging.'
  c.default_value true
  c.switch [:d, :debug]

  c.desc 'Name of the column.'
  c.default_value nil
  c.flag [:n, :name]

  c.desc 'Name of the entity.'
  c.default_value nil
  c.flag [:e, :entity]

  c.desc 'Type of the column.'
  c.default_value nil
  c.flag [:t, :type]

  c.desc 'Base config filename.'
  c.default_value nil
  c.flag [:b, :base]

  c.desc 'Input data filename.'
  c.default_value nil
  c.flag [:i, :input]

  c.action do |global_options,options,args|
    puts "EXPERIMENTAL FEATURE - BEWARE".color(:red)
    file = options[:input]
    name = options[:name]
    type = options[:type]
    entity = options[:entity]
    base_filename = options[:base]

    fail "You need to specify column name" if name.nil?
    fail "You need to specify column type" if type.nil?
    fail "You need to specify entity name" if entity.nil?
    fail "You need to specify input file name" if file.nil?

    base_config_file = Es::Helpers.load_config(base_filename)
    base = Es::Load.parse(base_config_file)

    load = Es::Load.new([
      Es::Entity.new(entity, {
        :file => file,
        :fields => [
          Es::Field.new('id', 'recordid'),
          Es::Field.new('timestamp', 'timestamp'),
          Es::Field.new(name, type)
        ]
      })
    ])

    base.get_entity(entity).add_field(Es::Field.new(name, type))
    puts "Added field #{field.name}" if options[:verbose]
    base.to_config_file(base_filename)
    
    load.entities.first.load(PID)
  end
end

desc 'Shows more info about'
command :inspect do |c|

  c.action do |global_options,options,args|

    what = args.first
    filename = args[1]

    case what
    when "load"
      fail "Specify a file with base config" if filename.nil?
      base_config_file = Es::Helpers.load_config(filename)
      base = Es::Load.parse(base_config_file)
      base.entities.each do |entity|
        puts entity.to_table
      end
    end
  end
end


pre do |global,command,options,args|
  next true if command.nil?
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  fail "PID env variable should be specified" if PID.nil? || PID.empty?
  fail "ES_NAME env variable should be specified" if ES_NAME.nil? || ES_NAME.empty?
  fail "LOGIN env variable should be specified" if LOGIN.nil? || LOGIN.empty?
  fail "PASSWORD env variable should be specified" if PASSWORD.nil? || PASSWORD.empty?

  GoodData.logger = Logger.new(STDOUT) if global[:logger]
  GD_SERVER = global[:server]
  GD_WEBDAV = global[:webdav]
  begin
    GoodData.connect LOGIN, PASSWORD, GD_SERVER, {
      :timeout       => 60,
      :webdav_server => GD_WEBDAV
    }
  rescue RestClient::BadRequest => e
    puts "Login Failed"
    exit 1
  end
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # pp exception.backtrace
  if exception.is_a?(SystemExit) && exception.status == 0
    false
  else
    # pp exception.inspect
    puts exception.message.color(:red)
    false
  end
  
  # Error logic here
  # return false to skip default error handling
  # false
  # true
end

exit GLI.run(ARGV)
